buildscript {
    apply from: "${rootDir}/build/dependencies.gradle"
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/milestone'}
    }
    dependencies {
        classpath gradle_plugins.values()
        classpath "io.freefair.gradle:lombok-plugin:6.6.1"
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.7.7'
    }
}

ext {
    toolProjects = Arrays.asList(project(":tool")).toSet()
    toolProjects.addAll(project(":tool").subprojects)
    apiProjects = Arrays.asList(project(":common"), project(":adm-api")).toSet()
    bootProjects = subprojects - toolProjects - apiProjects
}

configure(allprojects - toolProjects) { project ->
    buildDir = new File("${rootProject.projectDir}", "out/${project.name}")

    apply plugin: 'idea'
    idea {
        module {
            inheritOutputDirs = true
        }
    }

    repositories {
        mavenLocal()
        maven {
            url 'https://maven-local.mobisummer-inc.com/repository/maven-public'
        }
        mavenCentral()
        jcenter()
    }

    apply plugin: 'io.spring.dependency-management'

    // 统一依赖版本管理
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.7.7'
        }

        dependencies {
            // Util
            dependency 'cn.hutool:hutool-all:5.8.10'
            dependency 'com.google.http-client:google-http-client:1.42.2'

            // OkHttp3-FastJson2
            dependency 'com.squareup.okio:okio:2.8.0'
            dependency 'cn.zhxu:okhttps-fastjson2:4.0.0'

            // MySQL
            dependency 'mysql:mysql-connector-java:8.0.22'
            dependency 'com.alibaba:druid-spring-boot-starter:1.2.8'
            dependencySet(group: 'com.baomidou', version: '3.5.1') {
                entry 'mybatis-plus-boot-starter'
                entry 'dynamic-datasource-spring-boot-starter'
            }

            // Apollo
            dependency 'com.ctrip.framework.apollo:apollo-client:1.9.1'

            // CAT
            dependency "com.dianping.cat:cat-client:3.1.0"
            dependency 'org.codehaus.plexus:plexus-classworlds:2.5.1'
            dependency 'org.codehaus.plexus:plexus-utils:3.0.24'
            dependency 'org.codehaus.plexus:plexus-container-default:1.6'

            // xxl-job
            dependency 'com.xuxueli:xxl-job-core:2.3.0'

            // Lazada
            dependency 'com.lazada:lazop-api-sdk:1.2.0'

            // Swagger
            dependency 'com.github.xiaoymin:knife4j-openapi2-spring-boot-starter:4.0.0'
            dependency 'io.swagger:swagger-annotations:1.6.2'
        }
    }
}

configure(subprojects - toolProjects) { project ->
    version = "${RELEASE_VERSION}"

    apply from: "${rootDir}/build/dependencies.gradle"
    apply from: "${rootDir}/build/dist.gradle"

    apply plugin: 'java-library'
    apply plugin: 'io.freefair.lombok'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        // SpringBoot
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        implementation libraries.disruptor
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    test {
        enabled true
        useJUnitPlatform()
    }
}

configure(bootProjects) { project ->
    apply plugin: 'org.springframework.boot'

    dependencies {
        // Apollo
        implementation 'com.ctrip.framework.apollo:apollo-client'

        // CAT
        implementation "com.dianping.cat:cat-client"
        implementation 'org.codehaus.plexus:plexus-classworlds'
        implementation 'org.codehaus.plexus:plexus-utils'
        implementation('org.codehaus.plexus:plexus-container-default') {
            exclude group: 'com.google.collections', module: 'google-collections'
        }

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}
